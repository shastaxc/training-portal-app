{"remainingRequest":"C:\\Projects\\training-portal-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Projects\\training-portal-app\\node_modules\\@angular\\flex-layout\\esm5\\core.es5.js","dependencies":[{"path":"C:\\Projects\\training-portal-app\\node_modules\\@angular\\flex-layout\\esm5\\core.es5.js","mtime":499162500000},{"path":"C:\\Projects\\training-portal-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532030343113},{"path":"C:\\Projects\\training-portal-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_common,rxjs,rxjs_operators,tslib PURE_IMPORTS_END */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken, inject, Injectable, Inject, NgModule, NgZone, Optional, SkipSelf, SimpleChange, defineInjectable } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { __extends } from 'tslib';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nfunction removeStyles(_document, platformId) {\n    return function () {\n        if (isPlatformBrowser(platformId)) {\n            var /** @type {?} */ elements = Array.from(_document.querySelectorAll(\"[class*=\" + CLASS_NAME + \"]\"));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            var /** @type {?} */ classRegex_1 = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(function (el) {\n                el.classList.contains(CLASS_NAME + \"ssr\") && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex_1, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nvar /** @type {?} */ BROWSER_PROVIDER = {\n    provide: /** @type {?} */ (APP_BOOTSTRAP_LISTENER),\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nvar /** @type {?} */ CLASS_NAME = 'flex-layout-';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ BREAKPOINT = /*@__PURE__*/ new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: function () { return null; }\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ RESPONSIVE_ALIASES = [\n    'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\nvar /** @type {?} */ DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: '(min-width: 0px) and (max-width: 599px)'\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: '(min-width: 600px)'\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: '(max-width: 599px)'\n    },\n    {\n        alias: 'sm',\n        mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: '(min-width: 960px)'\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: '(max-width: 959px)'\n    },\n    {\n        alias: 'md',\n        mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n    },\n    {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: '(min-width: 1280px)'\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: '(max-width: 1279px)'\n    },\n    {\n        alias: 'lg',\n        mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: '(min-width: 1920px)'\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        mediaQuery: '(max-width: 1920px)'\n    },\n    {\n        alias: 'xl',\n        mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n    }\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/* tslint:disable */\nvar /** @type {?} */ HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599px)';\nvar /** @type {?} */ HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959px)';\nvar /** @type {?} */ TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279px)';\nvar /** @type {?} */ TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839px)';\nvar /** @type {?} */ WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nvar /** @type {?} */ WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nvar /** @type {?} */ ScreenTypes = {\n    'HANDSET': HANDSET_PORTRAIT + \", \" + HANDSET_LANDSCAPE,\n    'TABLET': TABLET_PORTRAIT + \" , \" + TABLET_LANDSCAPE,\n    'WEB': WEB_PORTRAIT + \", \" + WEB_LANDSCAPE + \" \",\n    'HANDSET_PORTRAIT': \"\" + HANDSET_PORTRAIT,\n    'TABLET_PORTRAIT': TABLET_PORTRAIT + \" \",\n    'WEB_PORTRAIT': \"\" + WEB_PORTRAIT,\n    'HANDSET_LANDSCAPE': HANDSET_LANDSCAPE + \"]\",\n    'TABLET_LANDSCAPE': \"\" + TABLET_LANDSCAPE,\n    'WEB_LANDSCAPE': \"\" + WEB_LANDSCAPE\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nvar /** @type {?} */ ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.portrait', 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {\n        var source = sources_1[_a];\n        if (source != null) {\n            for (var /** @type {?} */ key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n    var /** @type {?} */ first = part.length > 0 ? part.charAt(0) : '';\n    var /** @type {?} */ remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n    list.forEach(function (bp) {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom) {\n    if (custom === void 0) {\n        custom = [];\n    }\n    var /** @type {?} */ dict = {};\n    defaults.forEach(function (bp) {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach(function (bp) {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(function (k) { return dict[k]; }));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n};\nvar /** @type {?} */ LAYOUT_CONFIG = /*@__PURE__*/ new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: function () { return DEFAULT_CONFIG; }\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nvar /** @type {?} */ BREAKPOINTS = /*@__PURE__*/ new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: function () {\n        var /** @type {?} */ breakpoints = inject(BREAKPOINT);\n        var /** @type {?} */ layoutConfig = inject(LAYOUT_CONFIG);\n        var /** @type {?} */ bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map(function (v) { return Array.isArray(v) ? v : [v]; }));\n        var /** @type {?} */ builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nvar BreakPointRegistry = /** @class */ /*@__PURE__*/ (function () {\n    function BreakPointRegistry(_registry) {\n        this._registry = _registry;\n    }\n    Object.defineProperty(BreakPointRegistry.prototype, \"items\", {\n        /**\n         * Accessor to raw list\n         */\n        get: /**\n         * Accessor to raw list\n         * @return {?}\n         */ function () {\n            return this._registry.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreakPointRegistry.prototype, \"sortedItems\", {\n        /**\n         * Accessor to sorted list used for registration with matchMedia API\n         *\n         * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n         *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n         *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n         */\n        get: /**\n         * Accessor to sorted list used for registration with matchMedia API\n         *\n         * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n         *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n         *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ overlaps = this._registry.filter(function (it) { return it.overlapping === true; });\n            var /** @type {?} */ nonOverlaps = this._registry.filter(function (it) { return it.overlapping !== true; });\n            return overlaps.concat(nonOverlaps);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n    BreakPointRegistry.prototype.findByAlias = /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n        function (alias) {\n            return this._registry.find(function (bp) { return bp.alias == alias; }) || null;\n        };\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    BreakPointRegistry.prototype.findByQuery = /**\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            return this._registry.find(function (bp) { return bp.mediaQuery == query; }) || null;\n        };\n    Object.defineProperty(BreakPointRegistry.prototype, \"overlappings\", {\n        /**\n         * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n         * e.g. gt-sm overlaps md, lg, and xl\n         */\n        get: /**\n         * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n         * e.g. gt-sm overlaps md, lg, and xl\n         * @return {?}\n         */ function () {\n            return this._registry.filter(function (it) { return it.overlapping == true; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreakPointRegistry.prototype, \"aliases\", {\n        /**\n         * Get list of all registered (non-empty) breakpoint aliases\n         */\n        get: /**\n         * Get list of all registered (non-empty) breakpoint aliases\n         * @return {?}\n         */ function () {\n            return this._registry.map(function (it) { return it.alias; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreakPointRegistry.prototype, \"suffixes\", {\n        /**\n         * Aliases are mapped to properties using suffixes\n         * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n         * for property layoutGtSM.\n         */\n        get: /**\n         * Aliases are mapped to properties using suffixes\n         * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n         * for property layoutGtSM.\n         * @return {?}\n         */ function () {\n            return this._registry.map(function (it) { return !!it.suffix ? it.suffix : ''; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */ BreakPointRegistry.ngInjectableDef = defineInjectable({ factory: function BreakPointRegistry_Factory() { return new BreakPointRegistry(inject(BREAKPOINTS)); }, token: BreakPointRegistry, providedIn: \"root\" });\n    return BreakPointRegistry;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nvar /**\n * Class instances emitted [to observers] for each mql notification\n */ MediaChange = /** @class */ /*@__PURE__*/ (function () {\n    function MediaChange(matches, mediaQuery, mqAlias, suffix // e.g.   GtSM, Md, GtLg\n    ) {\n        if (matches === void 0) {\n            matches = false;\n        }\n        if (mediaQuery === void 0) {\n            mediaQuery = 'all';\n        }\n        if (mqAlias === void 0) {\n            mqAlias = '';\n        }\n        if (suffix === void 0) {\n            suffix = '';\n        }\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n    }\n    /**\n     * @return {?}\n     */\n    MediaChange.prototype.clone = /**\n     * @return {?}\n     */\n        function () {\n            return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n        };\n    return MediaChange;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nvar MatchMedia = /** @class */ /*@__PURE__*/ (function () {\n    function MatchMedia(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        this._registry = new Map();\n        this._source = new BehaviorSubject(new MediaChange(true));\n        this._observable$ = this._source.asObservable();\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    MatchMedia.prototype.isActive = /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            var /** @type {?} */ mql = this._registry.get(mediaQuery);\n            return !!mql ? mql.matches : false;\n        };\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n     *       be announced.\n     */\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n     *       be announced.\n     * @param {?=} mediaQuery\n     * @return {?}\n     */\n    MatchMedia.prototype.observe = /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n     *       be announced.\n     * @param {?=} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            if (mediaQuery) {\n                this.registerQuery(mediaQuery);\n            }\n            return this._observable$.pipe(filter(function (change) {\n                return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n            }));\n        };\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    MatchMedia.prototype.registerQuery = /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            var _this = this;\n            var /** @type {?} */ list = normalizeQuery(mediaQuery);\n            if (list.length > 0) {\n                this._prepareQueryCSS(list, this._document);\n                list.forEach(function (query) {\n                    var /** @type {?} */ mql = _this._registry.get(query);\n                    var /** @type {?} */ onMQLEvent = function (e) {\n                        _this._zone.run(function () {\n                            var /** @type {?} */ change = new MediaChange(e.matches, query);\n                            _this._source.next(change);\n                        });\n                    };\n                    if (!mql) {\n                        mql = _this._buildMQL(query);\n                        mql.addListener(onMQLEvent);\n                        _this._registry.set(query, mql);\n                    }\n                    if (mql.matches) {\n                        onMQLEvent(mql); // Announce activate range for initial subscribers\n                    }\n                });\n            }\n        };\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    MatchMedia.prototype._buildMQL = /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            var /** @type {?} */ canListen = isPlatformBrowser(this._platformId) &&\n                !!( /** @type {?} */(window)).matchMedia('all').addListener;\n            return canListen ? ( /** @type {?} */(window)).matchMedia(query) : /** @type {?} */ ({\n                matches: query === 'all' || query === '',\n                media: query,\n                addListener: function () {\n                },\n                removeListener: function () {\n                }\n            });\n        };\n    /**\n     * For Webkit engines that only trigger the MediaQueryList Listener\n     * when there is at least one CSS selector for the respective media query.\n     *\n     * @param query string The mediaQuery used to create a faux CSS selector\n     *\n     */\n    /**\n     * For Webkit engines that only trigger the MediaQueryList Listener\n     * when there is at least one CSS selector for the respective media query.\n     *\n     * @param {?} mediaQueries\n     * @param {?} _document\n     * @return {?}\n     */\n    MatchMedia.prototype._prepareQueryCSS = /**\n     * For Webkit engines that only trigger the MediaQueryList Listener\n     * when there is at least one CSS selector for the respective media query.\n     *\n     * @param {?} mediaQueries\n     * @param {?} _document\n     * @return {?}\n     */\n        function (mediaQueries, _document) {\n            var /** @type {?} */ list = mediaQueries.filter(function (it) { return !ALL_STYLES[it]; });\n            if (list.length > 0) {\n                var /** @type {?} */ query = list.join(', ');\n                try {\n                    var /** @type {?} */ styleEl_1 = _document.createElement('style');\n                    styleEl_1.setAttribute('type', 'text/css');\n                    if (!styleEl_1['styleSheet']) {\n                        var /** @type {?} */ cssText = \"\\n/*\\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\\n  see http://bit.ly/2sd4HMP\\n*/\\n@media \" + query + \" {.fx-query-test{ }}\\n\";\n                        styleEl_1.appendChild(_document.createTextNode(cssText));\n                    }\n                    _document.head.appendChild(styleEl_1);\n                    // Store in private global registry\n                    list.forEach(function (mq) { return ALL_STYLES[mq] = styleEl_1; });\n                }\n                catch ( /** @type {?} */e) {\n                    console.error(e);\n                }\n            }\n        };\n    /** @nocollapse */ MatchMedia.ngInjectableDef = defineInjectable({ factory: function MatchMedia_Factory() { return new MatchMedia(inject(NgZone), inject(PLATFORM_ID), inject(DOCUMENT)); }, token: MatchMedia, providedIn: \"root\" });\n    return MatchMedia;\n}());\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nvar /** @type {?} */ ALL_STYLES = {};\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n * @param {?} mediaQuery\n * @return {?}\n */\nfunction normalizeQuery(mediaQuery) {\n    return (typeof mediaQuery === 'undefined') ? [] :\n        (typeof mediaQuery === 'string') ? [mediaQuery] : unique(/** @type {?} */ (mediaQuery));\n}\n/**\n * Filter duplicate mediaQueries in the list\n * @param {?} list\n * @return {?}\n */\nfunction unique(list) {\n    var /** @type {?} */ seen = {};\n    return list.filter(function (item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n    return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n    } : {});\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Base class for MediaService and pseudo-token for\n * @abstract\n */\nvar /**\n * Base class for MediaService and pseudo-token for\n * @abstract\n */ ObservableMedia = /** @class */ /*@__PURE__*/ (function () {\n    function ObservableMedia() {\n    }\n    return ObservableMedia;\n}());\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  \\@usage\n *\n *  // RxJS\n *  import {filter} from 'rxjs/operators/filter';\n *  import { ObservableMedia } from '\\@angular/flex-layout';\n *\n *  \\@Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .pipe(\n *          filter((change:MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n */\nvar MediaService = /** @class */ /*@__PURE__*/ (function () {\n    function MediaService(breakpoints, mediaWatcher) {\n        this.breakpoints = breakpoints;\n        this.mediaWatcher = mediaWatcher;\n        /**\n         * Should we announce gt-<xxx> breakpoint activations ?\n         */\n        this.filterOverlaps = true;\n        this._registerBreakPoints();\n        this.observable$ = this._buildObservable();\n    }\n    /**\n     * Test if specified query/alias is active.\n     */\n    /**\n     * Test if specified query/alias is active.\n     * @param {?} alias\n     * @return {?}\n     */\n    MediaService.prototype.isActive = /**\n     * Test if specified query/alias is active.\n     * @param {?} alias\n     * @return {?}\n     */\n        function (alias) {\n            var /** @type {?} */ query = this._toMediaQuery(alias);\n            return this.mediaWatcher.isActive(query);\n        };\n    /**\n     * Proxy to the Observable subscribe method\n     */\n    /**\n     * Proxy to the Observable subscribe method\n     * @param {?=} next\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    MediaService.prototype.subscribe = /**\n     * Proxy to the Observable subscribe method\n     * @param {?=} next\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n        function (next, error, complete) {\n            return this.observable$.subscribe(next, error, complete);\n        };\n    /**\n     * Access to observable for use with operators like\n     * .filter(), .map(), etc.\n     */\n    /**\n     * Access to observable for use with operators like\n     * .filter(), .map(), etc.\n     * @return {?}\n     */\n    MediaService.prototype.asObservable = /**\n     * Access to observable for use with operators like\n     * .filter(), .map(), etc.\n     * @return {?}\n     */\n        function () {\n            return this.observable$;\n        };\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @return {?}\n     */\n    MediaService.prototype._registerBreakPoints = /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ queries = this.breakpoints.sortedItems.map(function (bp) { return bp.mediaQuery; });\n            this.mediaWatcher.registerQuery(queries);\n        };\n    /**\n     * Prepare internal observable\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @return {?}\n     */\n    MediaService.prototype._buildObservable = /**\n     * Prepare internal observable\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ self = this;\n            var /** @type {?} */ media$ = this.mediaWatcher.observe();\n            var /** @type {?} */ activationsOnly = function (change) {\n                return change.matches === true;\n            };\n            var /** @type {?} */ addAliasInformation = function (change) {\n                return mergeAlias(change, _this._findByQuery(change.mediaQuery));\n            };\n            var /** @type {?} */ excludeOverlaps = function (change) {\n                var /** @type {?} */ bp = _this.breakpoints.findByQuery(change.mediaQuery);\n                return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n            };\n            /**\n                 * Only pass/announce activations (not de-activations)\n                 * Inject associated (if any) alias information into the MediaChange event\n                 * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n                 */\n            return media$.pipe(filter(activationsOnly), filter(excludeOverlaps), map(addAliasInformation));\n        };\n    /**\n     * Breakpoint locator by alias\n     * @param {?} alias\n     * @return {?}\n     */\n    MediaService.prototype._findByAlias = /**\n     * Breakpoint locator by alias\n     * @param {?} alias\n     * @return {?}\n     */\n        function (alias) {\n            return this.breakpoints.findByAlias(alias);\n        };\n    /**\n     * Breakpoint locator by mediaQuery\n     * @param {?} query\n     * @return {?}\n     */\n    MediaService.prototype._findByQuery = /**\n     * Breakpoint locator by mediaQuery\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            return this.breakpoints.findByQuery(query);\n        };\n    /**\n     * Find associated breakpoint (if any)\n     * @param {?} query\n     * @return {?}\n     */\n    MediaService.prototype._toMediaQuery = /**\n     * Find associated breakpoint (if any)\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            var /** @type {?} */ bp = this._findByAlias(query) || this._findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n    /** @nocollapse */ MediaService.ngInjectableDef = defineInjectable({ factory: function MediaService_Factory() { return new MediaService(inject(BreakPointRegistry), inject(MatchMedia)); }, token: MediaService, providedIn: \"root\" });\n    return MediaService;\n}());\nvar /** @type {?} */ ObservableMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: ObservableMedia,\n    useClass: MediaService\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\nvar CoreModule = /** @class */ /*@__PURE__*/ (function () {\n    function CoreModule() {\n    }\n    return CoreModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nvar StylesheetMap = /** @class */ /*@__PURE__*/ (function () {\n    function StylesheetMap() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n    StylesheetMap.prototype.addStyleToElement = /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n        function (element, style, value) {\n            var /** @type {?} */ stylesheet = this.stylesheet.get(element);\n            if (stylesheet) {\n                stylesheet.set(style, value);\n            }\n            else {\n                this.stylesheet.set(element, new Map([[style, value]]));\n            }\n        };\n    /**\n     * Clear the virtual stylesheet\n     */\n    /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n    StylesheetMap.prototype.clearStyles = /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n        function () {\n            this.stylesheet.clear();\n        };\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n    StylesheetMap.prototype.getStyleForElement = /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n        function (el, styleName) {\n            var /** @type {?} */ styles = this.stylesheet.get(el);\n            var /** @type {?} */ value = '';\n            if (styles) {\n                var /** @type {?} */ style = styles.get(styleName);\n                if (typeof style === 'number' || typeof style === 'string') {\n                    value = style + '';\n                }\n            }\n            return value;\n        };\n    /** @nocollapse */ StylesheetMap.ngInjectableDef = defineInjectable({ factory: function StylesheetMap_Factory() { return new StylesheetMap(); }, token: StylesheetMap, providedIn: \"root\" });\n    return StylesheetMap;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ensure a single global service provider\n * @deprecated\n * \\@deletion-target v6.0.0-beta.16\n * @param {?} parentSheet\n * @return {?}\n */\nfunction STYLESHEET_MAP_PROVIDER_FACTORY(parentSheet) {\n    return parentSheet || new StylesheetMap();\n}\n/**\n * Export provider that uses a global service factory (above)\n * @deprecated\n * \\@deletion-target v6.0.0-beta.16\n */\nvar /** @type {?} */ STYLESHEET_MAP_PROVIDER = {\n    provide: StylesheetMap,\n    deps: [\n        [/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), StylesheetMap],\n    ],\n    useFactory: STYLESHEET_MAP_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nvar /** @type {?} */ SERVER_TOKEN = /*@__PURE__*/ new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: function () { return false; }\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ INLINE = 'inline';\nvar /** @type {?} */ LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n    var _a = validateValue(value), direction = _a[0], wrap = _a[1], isInline = _a[2];\n    return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n    value = value ? value.toLowerCase() : '';\n    var _a = value.split(' '), direction = _a[0], wrap = _a[1], inline = _a[2];\n    // First value must be the `flex-direction`\n    if (!LAYOUT_VALUES.find(function (x) { return x === direction; })) {\n        direction = LAYOUT_VALUES[0];\n    }\n    if (wrap === INLINE) {\n        wrap = (inline !== INLINE) ? inline : '';\n        inline = INLINE;\n    }\n    return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n    if (!!value) {\n        switch (value.toLowerCase()) {\n            case 'reverse':\n            case 'wrap-reverse':\n            case 'reverse-wrap':\n                value = 'wrap-reverse';\n                break;\n            case 'no':\n            case 'none':\n            case 'nowrap':\n                value = 'nowrap';\n                break;\n            // All other values fallback to 'wrap'\n            default:\n                value = 'wrap';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap, inline) {\n    if (wrap === void 0) {\n        wrap = null;\n    }\n    if (inline === void 0) {\n        inline = false;\n    }\n    return {\n        'display': inline ? 'inline-flex' : 'flex',\n        'box-sizing': 'border-box',\n        'flex-direction': direction,\n        'flex-wrap': !!wrap ? wrap : null\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar KeyOptions = /** @class */ /*@__PURE__*/ (function () {\n    function KeyOptions(baseKey, defaultValue, inputKeys) {\n        this.baseKey = baseKey;\n        this.defaultValue = defaultValue;\n        this.inputKeys = inputKeys;\n    }\n    return KeyOptions;\n}());\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nvar /**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */ ResponsiveActivation = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     */\n    function ResponsiveActivation(_options, _mediaMonitor, _onMediaChanges) {\n        this._options = _options;\n        this._mediaMonitor = _mediaMonitor;\n        this._onMediaChanges = _onMediaChanges;\n        this._subscribers = [];\n        this._registryMap = this._buildRegistryMap();\n        this._subscribers = this._configureChangeObservers();\n    }\n    Object.defineProperty(ResponsiveActivation.prototype, \"registryFromLargest\", {\n        /**\n         * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n         * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n         * important when several media queries are 'registered' and from which, the browser uses the\n         * first matching media query.\n         */\n        get: /**\n         * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n         * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n         * important when several media queries are 'registered' and from which, the browser uses the\n         * first matching media query.\n         * @return {?}\n         */ function () {\n            return this._registryMap.slice().reverse();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResponsiveActivation.prototype, \"mediaMonitor\", {\n        /**\n         * Accessor to the DI'ed directive property\n         * Each directive instance has a reference to the MediaMonitor which is\n         * used HERE to subscribe to mediaQuery change notifications.\n         */\n        get: /**\n         * Accessor to the DI'ed directive property\n         * Each directive instance has a reference to the MediaMonitor which is\n         * used HERE to subscribe to mediaQuery change notifications.\n         * @return {?}\n         */ function () {\n            return this._mediaMonitor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResponsiveActivation.prototype, \"activatedInputKey\", {\n        /**\n         * Determine which directive @Input() property is currently active (for the viewport size):\n         * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n         * that is defined; otherwise the default property key will be used.\n         * e.g.\n         *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n         *      key is `.md` then `.gt-sm` should be used instead\n         */\n        get: /**\n         * Determine which directive \\@Input() property is currently active (for the viewport size):\n         * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n         * that is defined; otherwise the default property key will be used.\n         * e.g.\n         *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n         *      key is `.md` then `.gt-sm` should be used instead\n         * @return {?}\n         */ function () {\n            return this._activatedInputKey || this._options.baseKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResponsiveActivation.prototype, \"activatedInput\", {\n        /**\n         * Get the currently activated @Input value or the fallback default @Input value\n         */\n        get: /**\n         * Get the currently activated \\@Input value or the fallback default \\@Input value\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ key = this.activatedInputKey;\n            return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Fast validator for presence of attribute on the host element\n     */\n    /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n    ResponsiveActivation.prototype.hasKeyValue = /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            var /** @type {?} */ value = this._options.inputKeys[key];\n            return typeof value !== 'undefined';\n        };\n    /**\n     * Remove interceptors, restore original functions, and forward the onDestroy() call\n     */\n    /**\n     * Remove interceptors, restore original functions, and forward the onDestroy() call\n     * @return {?}\n     */\n    ResponsiveActivation.prototype.destroy = /**\n     * Remove interceptors, restore original functions, and forward the onDestroy() call\n     * @return {?}\n     */\n        function () {\n            this._subscribers.forEach(function (link) {\n                link.unsubscribe();\n            });\n            this._subscribers = [];\n        };\n    /**\n     * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n     * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._configureChangeObservers = /**\n     * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n     * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ subscriptions = [];\n            this._registryMap.forEach(function (bp) {\n                if (_this._keyInUse(bp.key)) {\n                    // Inject directive default property key name: to let onMediaChange() calls\n                    // know which property is being triggered...\n                    var /** @type {?} */ buildChanges = function (change) {\n                        change = change.clone();\n                        change.property = _this._options.baseKey;\n                        return change;\n                    };\n                    subscriptions.push(_this.mediaMonitor\n                        .observe(bp.alias)\n                        .pipe(map(buildChanges))\n                        .subscribe(function (change) {\n                        _this._onMonitorEvents(change);\n                    }));\n                }\n            });\n            return subscriptions;\n        };\n    /**\n     * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n     * in the HTML markup\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._buildRegistryMap = /**\n     * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n     * in the HTML markup\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return this.mediaMonitor.breakpoints\n                .map(function (bp) {\n                return /** @type {?} */ (extendObject({}, bp, {\n                    baseKey: _this._options.baseKey,\n                    // e.g. layout, hide, self-align, flex-wrap\n                    key: _this._options.baseKey + bp.suffix // e.g.  layoutGtSm, layoutMd, layoutGtLg\n                }));\n            })\n                .filter(function (bp) { return _this._keyInUse(bp.key); });\n        };\n    /**\n     * Synchronizes change notifications with the current mq-activated @Input and calculates the\n     * mq-activated input value or the default value\n     */\n    /**\n     * Synchronizes change notifications with the current mq-activated \\@Input and calculates the\n     * mq-activated input value or the default value\n     * @param {?} change\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._onMonitorEvents = /**\n     * Synchronizes change notifications with the current mq-activated \\@Input and calculates the\n     * mq-activated input value or the default value\n     * @param {?} change\n     * @return {?}\n     */\n        function (change) {\n            if (change.property == this._options.baseKey) {\n                change.value = this._calculateActivatedValue(change);\n                this._onMediaChanges(change);\n            }\n        };\n    /**\n     * Has the key been specified in the HTML markup and thus is intended\n     * to participate in activation processes.\n     * @param {?} key\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._keyInUse = /**\n     * Has the key been specified in the HTML markup and thus is intended\n     * to participate in activation processes.\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._lookupKeyValue(key) !== undefined;\n        };\n    /**\n     *  Map input key associated with mediaQuery activation to closest defined input key\n     *  then return the values associated with the targeted input property\n     *\n     *  !! change events may arrive out-of-order (activate before deactivate)\n     *     so make sure the deactivate is used ONLY when the keys match\n     *     (since a different activate may be in use)\n     * @param {?} current\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._calculateActivatedValue = /**\n     *  Map input key associated with mediaQuery activation to closest defined input key\n     *  then return the values associated with the targeted input property\n     *\n     *  !! change events may arrive out-of-order (activate before deactivate)\n     *     so make sure the deactivate is used ONLY when the keys match\n     *     (since a different activate may be in use)\n     * @param {?} current\n     * @return {?}\n     */\n        function (current) {\n            var /** @type {?} */ currentKey = this._options.baseKey + current.suffix; // e.g. suffix == 'GtSm',\n            var /** @type {?} */ newKey = this._activatedInputKey; // e.g. newKey == hideGtSm\n            newKey = current.matches ? currentKey : ((newKey == currentKey) ? '' : newKey);\n            this._activatedInputKey = this._validateInputKey(newKey);\n            return this.activatedInput;\n        };\n    /**\n     * For the specified input property key, validate it is defined (used in the markup)\n     * If not see if a overlapping mediaQuery-related input key fallback has been defined\n     *\n     * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n     * @param {?} inputKey\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._validateInputKey = /**\n     * For the specified input property key, validate it is defined (used in the markup)\n     * If not see if a overlapping mediaQuery-related input key fallback has been defined\n     *\n     * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n     * @param {?} inputKey\n     * @return {?}\n     */\n        function (inputKey) {\n            var _this = this;\n            var /** @type {?} */ isMissingKey = function (key) { return !_this._keyInUse(key); };\n            if (isMissingKey(inputKey)) {\n                this.mediaMonitor.activeOverlaps.some(function (bp) {\n                    var /** @type {?} */ key = _this._options.baseKey + bp.suffix;\n                    if (!isMissingKey(key)) {\n                        inputKey = key;\n                        return true; // exit .some()\n                    }\n                    return false;\n                });\n            }\n            return inputKey;\n        };\n    /**\n     * Get the value (if any) for the directive instances \\@Input property (aka key)\n     * @param {?} key\n     * @return {?}\n     */\n    ResponsiveActivation.prototype._lookupKeyValue = /**\n     * Get the value (if any) for the directive instances \\@Input property (aka key)\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._options.inputKeys[key];\n        };\n    return ResponsiveActivation;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */\nvar /**\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */ BaseDirective = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     */\n    function BaseDirective(_mediaMonitor, _elementRef, _styler) {\n        this._mediaMonitor = _mediaMonitor;\n        this._elementRef = _elementRef;\n        this._styler = _styler;\n        /**\n         *  Dictionary of input keys with associated values\n         */\n        this._inputMap = {};\n        /**\n         * Has the `ngOnInit()` method fired\n         *\n         * Used to allow *ngFor tasks to finish and support queries like\n         * getComputedStyle() during ngOnInit().\n         */\n        this._hasInitialized = false;\n    }\n    Object.defineProperty(BaseDirective.prototype, \"hasMediaQueryListener\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this._mqActivation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseDirective.prototype, \"activatedValue\", {\n        /**\n         * Imperatively determine the current activated [input] value;\n         * if called before ngOnInit() this will return `undefined`\n         */\n        get: /**\n         * Imperatively determine the current activated [input] value;\n         * if called before ngOnInit() this will return `undefined`\n         * @return {?}\n         */ function () {\n            return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n        },\n        /**\n         * Change the currently activated input value and force-update\n         * the injected CSS (by-passing change detection).\n         *\n         * NOTE: Only the currently activated input value will be modified;\n         *       other input values will NOT be affected.\n         */\n        set: /**\n         * Change the currently activated input value and force-update\n         * the injected CSS (by-passing change detection).\n         *\n         * NOTE: Only the currently activated input value will be modified;\n         *       other input values will NOT be affected.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var /** @type {?} */ key = 'baseKey', /** @type {?} */ previousVal;\n            if (this._mqActivation) {\n                key = this._mqActivation.activatedInputKey;\n                previousVal = this._inputMap[key];\n                this._inputMap[key] = value;\n            }\n            var /** @type {?} */ change = new SimpleChange(previousVal, value, false);\n            this.ngOnChanges(/** @type {?} */ (_a = {}, _a[key] = change, _a));\n            var _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseDirective.prototype, \"parentElement\", {\n        // *********************************************\n        // Accessor Methods\n        // *********************************************\n        /**\n         * Access to host element's parent DOM node\n         */\n        get: /**\n         * Access to host element's parent DOM node\n         * @return {?}\n         */ function () {\n            return this._elementRef.nativeElement.parentNode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseDirective.prototype, \"nativeElement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._elementRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Access the current value (if any) of the @Input property.\n     */\n    /**\n     * Access the current value (if any) of the \\@Input property.\n     * @param {?} key\n     * @return {?}\n     */\n    BaseDirective.prototype._queryInput = /**\n     * Access the current value (if any) of the \\@Input property.\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._inputMap[key];\n        };\n    // *********************************************\n    // Lifecycle Methods\n    // *********************************************\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     */\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     * @return {?}\n     */\n    BaseDirective.prototype.ngOnInit = /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     * @return {?}\n     */\n        function () {\n            this._display = this._getDisplayStyle();\n            this._hasInitialized = true;\n        };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    BaseDirective.prototype.ngOnChanges = /**\n     * @param {?} change\n     * @return {?}\n     */\n        function (change) {\n            throw new Error(\"BaseDirective::ngOnChanges should be overridden in subclass: \" + change);\n        };\n    /**\n     * @return {?}\n     */\n    BaseDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._mqActivation) {\n                this._mqActivation.destroy();\n            }\n            delete this._mediaMonitor;\n        };\n    // *********************************************\n    // Protected Methods\n    // *********************************************\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     */\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     * @param {?} key\n     * @param {?} fallbackVal\n     * @return {?}\n     */\n    BaseDirective.prototype._getDefaultVal = /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     * @param {?} key\n     * @param {?} fallbackVal\n     * @return {?}\n     */\n        function (key, fallbackVal) {\n            var /** @type {?} */ val = this._queryInput(key);\n            var /** @type {?} */ hasDefaultVal = (val !== undefined && val !== null);\n            return (hasDefaultVal && val !== '') ? val : fallbackVal;\n        };\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     */\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirective.prototype._getDisplayStyle = /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     * @param {?=} source\n     * @return {?}\n     */\n        function (source) {\n            if (source === void 0) {\n                source = this.nativeElement;\n            }\n            var /** @type {?} */ query = 'display';\n            return this._styler.lookupStyle(source, query);\n        };\n    /**\n     * Quick accessor to raw attribute value on the target DOM element\n     */\n    /**\n     * Quick accessor to raw attribute value on the target DOM element\n     * @param {?} attribute\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirective.prototype._getAttributeValue = /**\n     * Quick accessor to raw attribute value on the target DOM element\n     * @param {?} attribute\n     * @param {?=} source\n     * @return {?}\n     */\n        function (attribute, source) {\n            if (source === void 0) {\n                source = this.nativeElement;\n            }\n            return this._styler.lookupAttributeValue(source, attribute);\n        };\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n    BaseDirective.prototype._getFlexFlowDirection = /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n        function (target, addIfMissing) {\n            if (addIfMissing === void 0) {\n                addIfMissing = false;\n            }\n            var /** @type {?} */ value = 'row';\n            var /** @type {?} */ hasInlineValue = '';\n            if (target) {\n                _a = this._styler.getFlowDirection(target), value = _a[0], hasInlineValue = _a[1];\n                if (!hasInlineValue && addIfMissing) {\n                    var /** @type {?} */ style = buildLayoutCSS(value);\n                    var /** @type {?} */ elements = [target];\n                    this._styler.applyStyleToElements(style, elements);\n                }\n            }\n            return value.trim() || 'row';\n            var _a;\n        };\n    /**\n     * Applies styles given via string pair or object map to the directive element.\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive element.\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n    BaseDirective.prototype._applyStyleToElement = /**\n     * Applies styles given via string pair or object map to the directive element.\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n        function (style, value, element) {\n            if (element === void 0) {\n                element = this.nativeElement;\n            }\n            this._styler.applyStyleToElement(element, style, value);\n        };\n    /**\n     * Applies styles given via string pair or object map to the directive's element.\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive's element.\n     * @param {?} style\n     * @param {?} elements\n     * @return {?}\n     */\n    BaseDirective.prototype._applyStyleToElements = /**\n     * Applies styles given via string pair or object map to the directive's element.\n     * @param {?} style\n     * @param {?} elements\n     * @return {?}\n     */\n        function (style, elements) {\n            this._styler.applyStyleToElements(style, elements);\n        };\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     */\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirective.prototype._cacheInput = /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (typeof source === 'object') {\n                for (var /** @type {?} */ prop in source) {\n                    this._inputMap[prop] = source[prop];\n                }\n            }\n            else {\n                if (!!key) {\n                    this._inputMap[key] = source;\n                }\n            }\n        };\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     */\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n    BaseDirective.prototype._listenForMediaQueryChanges = /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n        function (key, defaultValue, onMediaQueryChange) {\n            // tslint:disable-line:max-line-length\n            if (!this._mqActivation) {\n                var /** @type {?} */ keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n                this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor, function (change) { return onMediaQueryChange(change); });\n            }\n            return this._mqActivation;\n        };\n    Object.defineProperty(BaseDirective.prototype, \"childrenNodes\", {\n        /**\n         * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n         */\n        get: /**\n         * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ obj = this.nativeElement.children;\n            var /** @type {?} */ buffer = [];\n            // iterate backwards ensuring that length is an UInt32\n            for (var /** @type {?} */ i = obj.length; i--;) {\n                buffer[i] = obj[i];\n            }\n            return buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     */\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @param {?} baseKey\n     * @return {?}\n     */\n    BaseDirective.prototype.hasResponsiveAPI = /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @param {?} baseKey\n     * @return {?}\n     */\n        function (baseKey) {\n            var /** @type {?} */ totalKeys = Object.keys(this._inputMap).length;\n            var /** @type {?} */ baseValue = this._inputMap[baseKey];\n            return (totalKeys - (!!baseValue ? 1 : 0)) > 0;\n        };\n    /**\n     * Fast validator for presence of attribute on the host element\n     */\n    /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n    BaseDirective.prototype.hasKeyValue = /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._mqActivation.hasKeyValue(key);\n        };\n    Object.defineProperty(BaseDirective.prototype, \"hasInitialized\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hasInitialized;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BaseDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Adapter to the BaseDirective abstract class so it can be used via composition.\n * @see BaseDirective\n */\nvar /**\n * Adapter to the BaseDirective abstract class so it can be used via composition.\n * @see BaseDirective\n */ BaseDirectiveAdapter = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(BaseDirectiveAdapter, _super);\n    /**\n     * BaseDirectiveAdapter constructor\n     */\n    function BaseDirectiveAdapter(_baseKey, // non-responsive @Input property name\n    // non-responsive @Input property name\n    _mediaMonitor, _elementRef, _styler) {\n        var _this = _super.call(this, _mediaMonitor, _elementRef, _styler) || this;\n        _this._baseKey = _baseKey;\n        _this._mediaMonitor = _mediaMonitor;\n        _this._elementRef = _elementRef;\n        _this._styler = _styler;\n        return _this;\n    }\n    Object.defineProperty(BaseDirectiveAdapter.prototype, \"activeKey\", {\n        /**\n         * Accessor to determine which @Input property is \"active\"\n         * e.g. which property value will be used.\n         */\n        get: /**\n         * Accessor to determine which \\@Input property is \"active\"\n         * e.g. which property value will be used.\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ mqa = this._mqActivation;\n            var /** @type {?} */ key = mqa ? mqa.activatedInputKey : this._baseKey;\n            // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n            return (key === 'class') ? 'klazz' : key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseDirectiveAdapter.prototype, \"inputMap\", {\n        /** Hash map of all @Input keys/values defined/used */\n        get: /**\n         * Hash map of all \\@Input keys/values defined/used\n         * @return {?}\n         */ function () {\n            return this._inputMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseDirectiveAdapter.prototype, \"mqActivation\", {\n        /**\n         * @see BaseDirective._mqActivation\n         */\n        get: /**\n         * @see BaseDirective._mqActivation\n         * @return {?}\n         */ function () {\n            return this._mqActivation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n      * Does this directive have 1 or more responsive keys defined\n      * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n      */\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype.hasResponsiveAPI = /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @return {?}\n     */\n        function () {\n            return _super.prototype.hasResponsiveAPI.call(this, this._baseKey);\n        };\n    /**\n     * @see BaseDirective._queryInput\n     */\n    /**\n     * @see BaseDirective._queryInput\n     * @param {?} key\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype.queryInput = /**\n     * @see BaseDirective._queryInput\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return key ? this._queryInput(key) : undefined;\n        };\n    /**\n     *  Save the property value.\n     */\n    /**\n     *  Save the property value.\n     * @param {?=} key\n     * @param {?=} source\n     * @param {?=} cacheRaw\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype.cacheInput = /**\n     *  Save the property value.\n     * @param {?=} key\n     * @param {?=} source\n     * @param {?=} cacheRaw\n     * @return {?}\n     */\n        function (key, source, cacheRaw) {\n            if (cacheRaw === void 0) {\n                cacheRaw = false;\n            }\n            if (cacheRaw) {\n                this._cacheInputRaw(key, source);\n            }\n            else if (Array.isArray(source)) {\n                this._cacheInputArray(key, source);\n            }\n            else if (typeof source === 'object') {\n                this._cacheInputObject(key, source);\n            }\n            else if (typeof source === 'string') {\n                this._cacheInputString(key, source);\n            }\n            else {\n                throw new Error(\"Invalid class value '\" + key + \"' provided. Did you want to cache the raw value?\");\n            }\n        };\n    /**\n     * @see BaseDirective._listenForMediaQueryChanges\n     */\n    /**\n     * @see BaseDirective._listenForMediaQueryChanges\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype.listenForMediaQueryChanges = /**\n     * @see BaseDirective._listenForMediaQueryChanges\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n        function (key, defaultValue, onMediaQueryChange) {\n            return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n        };\n    // ************************************************************\n    // Protected Methods\n    // ************************************************************\n    /**\n     * No implicit transforms of the source.\n     * Required when caching values expected later for KeyValueDiffers\n     */\n    /**\n     * No implicit transforms of the source.\n     * Required when caching values expected later for KeyValueDiffers\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype._cacheInputRaw = /**\n     * No implicit transforms of the source.\n     * Required when caching values expected later for KeyValueDiffers\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (key) {\n                this._inputMap[key] = source;\n            }\n        };\n    /**\n     *  Save the property value for Array values.\n     */\n    /**\n     *  Save the property value for Array values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype._cacheInputArray = /**\n     *  Save the property value for Array values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (key === void 0) {\n                key = '';\n            }\n            this._inputMap[key] = source ? source.join(' ') : '';\n        };\n    /**\n     *  Save the property value for key/value pair values.\n     */\n    /**\n     *  Save the property value for key/value pair values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype._cacheInputObject = /**\n     *  Save the property value for key/value pair values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (key === void 0) {\n                key = '';\n            }\n            var /** @type {?} */ classes = [];\n            if (source) {\n                for (var /** @type {?} */ prop in source) {\n                    if (!!source[prop]) {\n                        classes.push(prop);\n                    }\n                }\n            }\n            this._inputMap[key] = classes.join(' ');\n        };\n    /**\n     *  Save the property value for string values.\n     */\n    /**\n     *  Save the property value for string values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseDirectiveAdapter.prototype._cacheInputString = /**\n     *  Save the property value for string values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (key === void 0) {\n                key = '';\n            }\n            this._inputMap[key] = source;\n        };\n    return BaseDirectiveAdapter;\n}(BaseDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @deprecated\n * \\@deletion-target v6.0.0-beta.17\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */\nvar /**\n * @deprecated\n * \\@deletion-target v6.0.0-beta.17\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */ BaseFxDirective = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     */\n    function BaseFxDirective(_mediaMonitor, _elementRef, _styler) {\n        this._mediaMonitor = _mediaMonitor;\n        this._elementRef = _elementRef;\n        this._styler = _styler;\n        /**\n         *  Dictionary of input keys with associated values\n         */\n        this._inputMap = {};\n        /**\n         * Has the `ngOnInit()` method fired\n         *\n         * Used to allow *ngFor tasks to finish and support queries like\n         * getComputedStyle() during ngOnInit().\n         */\n        this._hasInitialized = false;\n    }\n    Object.defineProperty(BaseFxDirective.prototype, \"hasMediaQueryListener\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this._mqActivation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFxDirective.prototype, \"activatedValue\", {\n        /**\n         * Imperatively determine the current activated [input] value;\n         * if called before ngOnInit() this will return `undefined`\n         */\n        get: /**\n         * Imperatively determine the current activated [input] value;\n         * if called before ngOnInit() this will return `undefined`\n         * @return {?}\n         */ function () {\n            return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n        },\n        /**\n         * Change the currently activated input value and force-update\n         * the injected CSS (by-passing change detection).\n         *\n         * NOTE: Only the currently activated input value will be modified;\n         *       other input values will NOT be affected.\n         */\n        set: /**\n         * Change the currently activated input value and force-update\n         * the injected CSS (by-passing change detection).\n         *\n         * NOTE: Only the currently activated input value will be modified;\n         *       other input values will NOT be affected.\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var /** @type {?} */ key = 'baseKey', /** @type {?} */ previousVal;\n            if (this._mqActivation) {\n                key = this._mqActivation.activatedInputKey;\n                previousVal = this._inputMap[key];\n                this._inputMap[key] = value;\n            }\n            var /** @type {?} */ change = new SimpleChange(previousVal, value, false);\n            this.ngOnChanges(/** @type {?} */ (_a = {}, _a[key] = change, _a));\n            var _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFxDirective.prototype, \"parentElement\", {\n        // *********************************************\n        // Accessor Methods\n        // *********************************************\n        /**\n         * Access to host element's parent DOM node\n         */\n        get: /**\n         * Access to host element's parent DOM node\n         * @return {?}\n         */ function () {\n            return this._elementRef.nativeElement.parentNode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFxDirective.prototype, \"nativeElement\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._elementRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Access the current value (if any) of the @Input property.\n     */\n    /**\n     * Access the current value (if any) of the \\@Input property.\n     * @param {?} key\n     * @return {?}\n     */\n    BaseFxDirective.prototype._queryInput = /**\n     * Access the current value (if any) of the \\@Input property.\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._inputMap[key];\n        };\n    // *********************************************\n    // Lifecycle Methods\n    // *********************************************\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     */\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     * @return {?}\n     */\n    BaseFxDirective.prototype.ngOnInit = /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     * @return {?}\n     */\n        function () {\n            this._display = this._getDisplayStyle();\n            this._hasInitialized = true;\n        };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    BaseFxDirective.prototype.ngOnChanges = /**\n     * @param {?} change\n     * @return {?}\n     */\n        function (change) {\n            throw new Error(\"BaseFxDirective::ngOnChanges should be overridden in subclass: \" + change);\n        };\n    /**\n     * @return {?}\n     */\n    BaseFxDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._mqActivation) {\n                this._mqActivation.destroy();\n            }\n            delete this._mediaMonitor;\n        };\n    // *********************************************\n    // Protected Methods\n    // *********************************************\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     */\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     * @param {?} key\n     * @param {?} fallbackVal\n     * @return {?}\n     */\n    BaseFxDirective.prototype._getDefaultVal = /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     * @param {?} key\n     * @param {?} fallbackVal\n     * @return {?}\n     */\n        function (key, fallbackVal) {\n            var /** @type {?} */ val = this._queryInput(key);\n            var /** @type {?} */ hasDefaultVal = (val !== undefined && val !== null);\n            return (hasDefaultVal && val !== '') ? val : fallbackVal;\n        };\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     */\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseFxDirective.prototype._getDisplayStyle = /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     * @param {?=} source\n     * @return {?}\n     */\n        function (source) {\n            if (source === void 0) {\n                source = this.nativeElement;\n            }\n            var /** @type {?} */ query = 'display';\n            return this._styler.lookupStyle(source, query);\n        };\n    /**\n     * Quick accessor to raw attribute value on the target DOM element\n     */\n    /**\n     * Quick accessor to raw attribute value on the target DOM element\n     * @param {?} attribute\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseFxDirective.prototype._getAttributeValue = /**\n     * Quick accessor to raw attribute value on the target DOM element\n     * @param {?} attribute\n     * @param {?=} source\n     * @return {?}\n     */\n        function (attribute, source) {\n            if (source === void 0) {\n                source = this.nativeElement;\n            }\n            return this._styler.lookupAttributeValue(source, attribute);\n        };\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n    BaseFxDirective.prototype._getFlowDirection = /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n        function (target, addIfMissing) {\n            if (addIfMissing === void 0) {\n                addIfMissing = false;\n            }\n            var /** @type {?} */ value = 'row';\n            var /** @type {?} */ hasInlineValue = '';\n            if (target) {\n                _a = this._styler.getFlowDirection(target), value = _a[0], hasInlineValue = _a[1];\n                if (!hasInlineValue && addIfMissing) {\n                    var /** @type {?} */ style = buildLayoutCSS(value);\n                    var /** @type {?} */ elements = [target];\n                    this._styler.applyStyleToElements(style, elements);\n                }\n            }\n            return value.trim() || 'row';\n            var _a;\n        };\n    /**\n     * Applies styles given via string pair or object map to the directive element.\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive element.\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n    BaseFxDirective.prototype._applyStyleToElement = /**\n     * Applies styles given via string pair or object map to the directive element.\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n        function (style, value, element) {\n            if (element === void 0) {\n                element = this.nativeElement;\n            }\n            this._styler.applyStyleToElement(element, style, value);\n        };\n    /**\n     * Applies styles given via string pair or object map to the directive's element.\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive's element.\n     * @param {?} style\n     * @param {?} elements\n     * @return {?}\n     */\n    BaseFxDirective.prototype._applyStyleToElements = /**\n     * Applies styles given via string pair or object map to the directive's element.\n     * @param {?} style\n     * @param {?} elements\n     * @return {?}\n     */\n        function (style, elements) {\n            this._styler.applyStyleToElements(style, elements);\n        };\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     */\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    BaseFxDirective.prototype._cacheInput = /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n        function (key, source) {\n            if (typeof source === 'object') {\n                for (var /** @type {?} */ prop in source) {\n                    this._inputMap[prop] = source[prop];\n                }\n            }\n            else {\n                if (!!key) {\n                    this._inputMap[key] = source;\n                }\n            }\n        };\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     */\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n    BaseFxDirective.prototype._listenForMediaQueryChanges = /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n        function (key, defaultValue, onMediaQueryChange) {\n            // tslint:disable-line:max-line-length\n            if (!this._mqActivation) {\n                var /** @type {?} */ keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n                this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor, function (change) { return onMediaQueryChange(change); });\n            }\n            return this._mqActivation;\n        };\n    Object.defineProperty(BaseFxDirective.prototype, \"childrenNodes\", {\n        /**\n         * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n         */\n        get: /**\n         * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ obj = this.nativeElement.children;\n            var /** @type {?} */ buffer = [];\n            // iterate backwards ensuring that length is an UInt32\n            for (var /** @type {?} */ i = obj.length; i--;) {\n                buffer[i] = obj[i];\n            }\n            return buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     */\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @param {?} baseKey\n     * @return {?}\n     */\n    BaseFxDirective.prototype.hasResponsiveAPI = /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @param {?} baseKey\n     * @return {?}\n     */\n        function (baseKey) {\n            var /** @type {?} */ totalKeys = Object.keys(this._inputMap).length;\n            var /** @type {?} */ baseValue = this._inputMap[baseKey];\n            return (totalKeys - (!!baseValue ? 1 : 0)) > 0;\n        };\n    /**\n     * Fast validator for presence of attribute on the host element\n     */\n    /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n    BaseFxDirective.prototype.hasKeyValue = /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n        function (key) {\n            return this._mqActivation.hasKeyValue(key);\n        };\n    Object.defineProperty(BaseFxDirective.prototype, \"hasInitialized\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hasInitialized;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BaseFxDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nvar MockMatchMedia = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MockMatchMedia, _super);\n    function MockMatchMedia(_zone, _platformId, _document, _breakpoints) {\n        var _this = _super.call(this, _zone, _platformId, _document) || this;\n        _this._breakpoints = _breakpoints;\n        /**\n         * Special flag used to test BreakPoint registrations with MatchMedia\n         */\n        _this.autoRegisterQueries = true;\n        /**\n         * Allow fallback to overlapping mediaQueries to determine\n         * activatedInput(s).\n         */\n        _this.useOverlaps = false;\n        _this._actives = [];\n        _this._actives = [];\n        return _this;\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n    MockMatchMedia.prototype.clearAll = /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n        function () {\n            this._registry.forEach(function (mql, _) {\n                mql.destroy();\n            });\n            this._registry.clear();\n            this.useOverlaps = false;\n        };\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n    MockMatchMedia.prototype.activate = /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n        function (mediaQuery, useOverlaps) {\n            if (useOverlaps === void 0) {\n                useOverlaps = false;\n            }\n            useOverlaps = useOverlaps || this.useOverlaps;\n            mediaQuery = this._validateQuery(mediaQuery);\n            if (useOverlaps || !this.isActive(mediaQuery)) {\n                this._deactivateAll();\n                this._registerMediaQuery(mediaQuery);\n                this._activateWithOverlaps(mediaQuery, useOverlaps);\n            }\n            return this.hasActivated;\n        };\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n    MockMatchMedia.prototype._validateQuery = /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n        function (queryOrAlias) {\n            var /** @type {?} */ bp = this._breakpoints.findByAlias(queryOrAlias);\n            if (bp) {\n                queryOrAlias = bp.mediaQuery;\n            }\n            return queryOrAlias;\n        };\n    /**\n     * Manually activate any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n    MockMatchMedia.prototype._activateWithOverlaps = /**\n     * Manually activate any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n        function (mediaQuery, useOverlaps) {\n            if (useOverlaps) {\n                var /** @type {?} */ bp = this._breakpoints.findByQuery(mediaQuery);\n                var /** @type {?} */ alias = bp ? bp.alias : 'unknown';\n                // Simulate activation of overlapping lt-<XXX> ranges\n                switch (alias) {\n                    case 'lg':\n                        this._activateByAlias('lt-xl');\n                        break;\n                    case 'md':\n                        this._activateByAlias('lt-xl, lt-lg');\n                        break;\n                    case 'sm':\n                        this._activateByAlias('lt-xl, lt-lg, lt-md');\n                        break;\n                    case 'xs':\n                        this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n                        break;\n                }\n                // Simulate activate of overlapping gt-<xxxx> mediaQuery ranges\n                switch (alias) {\n                    case 'xl':\n                        this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n                        break;\n                    case 'lg':\n                        this._activateByAlias('gt-md, gt-sm, gt-xs');\n                        break;\n                    case 'md':\n                        this._activateByAlias('gt-sm, gt-xs');\n                        break;\n                    case 'sm':\n                        this._activateByAlias('gt-xs');\n                        break;\n                }\n            }\n            // Activate last since the responsiveActivation is watching *this* mediaQuery\n            return this._activateByQuery(mediaQuery);\n        };\n    /**\n     *\n     * @param {?} aliases\n     * @return {?}\n     */\n    MockMatchMedia.prototype._activateByAlias = /**\n     *\n     * @param {?} aliases\n     * @return {?}\n     */\n        function (aliases) {\n            var _this = this;\n            var /** @type {?} */ activate = function (alias) {\n                var /** @type {?} */ bp = _this._breakpoints.findByAlias(alias);\n                _this._activateByQuery(bp ? bp.mediaQuery : alias);\n            };\n            aliases.split(',').forEach(function (alias) { return activate(alias.trim()); });\n        };\n    /**\n     *\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    MockMatchMedia.prototype._activateByQuery = /**\n     *\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            var /** @type {?} */ mql = /** @type {?} */ (this._registry.get(mediaQuery));\n            var /** @type {?} */ alreadyAdded = this._actives.reduce(function (found, it) {\n                return found || (mql && (it.media === mql.media));\n            }, false);\n            if (mql && !alreadyAdded) {\n                this._actives.push(mql.activate());\n            }\n            return this.hasActivated;\n        };\n    /**\n     * Deactivate all current Mock MQLs\n     * @return {?}\n     */\n    MockMatchMedia.prototype._deactivateAll = /**\n     * Deactivate all current Mock MQLs\n     * @return {?}\n     */\n        function () {\n            if (this._actives.length) {\n                // Deactivate all current MQLs and reset the buffer\n                for (var _i = 0, _a = this._actives; _i < _a.length; _i++) {\n                    var it = _a[_i];\n                    it.deactivate();\n                }\n                this._actives = [];\n            }\n            return this;\n        };\n    /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    MockMatchMedia.prototype._registerMediaQuery = /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n        function (mediaQuery) {\n            if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n                this.registerQuery(mediaQuery);\n            }\n        };\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    MockMatchMedia.prototype._buildMQL = /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            return new MockMediaQueryList(query);\n        };\n    Object.defineProperty(MockMatchMedia.prototype, \"hasActivated\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return (this._actives.length > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MockMatchMedia;\n}(MatchMedia));\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nvar /**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */ MockMediaQueryList = /** @class */ /*@__PURE__*/ (function () {\n    function MockMediaQueryList(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n    }\n    Object.defineProperty(MockMediaQueryList.prototype, \"matches\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._isActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockMediaQueryList.prototype, \"media\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mediaQuery;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    MockMediaQueryList.prototype.destroy = /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n        function () {\n            this.deactivate();\n            this._listeners = [];\n        };\n    /** Notify all listeners that 'matches === TRUE' */\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    MockMediaQueryList.prototype.activate = /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this._isActive) {\n                this._isActive = true;\n                this._listeners.forEach(function (callback) {\n                    callback(_this);\n                });\n            }\n            return this;\n        };\n    /** Notify all listeners that 'matches === false' */\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    MockMediaQueryList.prototype.deactivate = /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._isActive) {\n                this._isActive = false;\n                this._listeners.forEach(function (callback) {\n                    callback(_this);\n                });\n            }\n            return this;\n        };\n    /** Add a listener to our internal list to activate later */\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    MockMediaQueryList.prototype.addListener = /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n        function (listener) {\n            if (this._listeners.indexOf(listener) === -1) {\n                this._listeners.push(listener);\n            }\n            if (this._isActive) {\n                listener(this);\n            }\n        };\n    /** Don't need to remove listeners in the testing environment */\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n    MockMediaQueryList.prototype.removeListener = /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n        function (_) {\n        };\n    return MockMediaQueryList;\n}());\n/**\n * Pre-configured provider for MockMatchMedia\n */\nvar /** @type {?} */ MockMatchMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nvar /**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */ ServerMediaQueryList = /** @class */ /*@__PURE__*/ (function () {\n    function ServerMediaQueryList(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n    }\n    Object.defineProperty(ServerMediaQueryList.prototype, \"matches\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._isActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ServerMediaQueryList.prototype, \"media\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mediaQuery;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    ServerMediaQueryList.prototype.destroy = /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n        function () {\n            this.deactivate();\n            this._listeners = [];\n        };\n    /** Notify all listeners that 'matches === TRUE' */\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    ServerMediaQueryList.prototype.activate = /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this._isActive) {\n                this._isActive = true;\n                this._listeners.forEach(function (callback) {\n                    callback(_this);\n                });\n            }\n            return this;\n        };\n    /** Notify all listeners that 'matches === false' */\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    ServerMediaQueryList.prototype.deactivate = /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._isActive) {\n                this._isActive = false;\n                this._listeners.forEach(function (callback) {\n                    callback(_this);\n                });\n            }\n            return this;\n        };\n    /** Add a listener to our internal list to activate later */\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    ServerMediaQueryList.prototype.addListener = /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n        function (listener) {\n            if (this._listeners.indexOf(listener) === -1) {\n                this._listeners.push(listener);\n            }\n            if (this._isActive) {\n                listener(this);\n            }\n        };\n    /** Don't need to remove listeners in the server environment */\n    /**\n     * Don't need to remove listeners in the server environment\n     * @param {?} _\n     * @return {?}\n     */\n    ServerMediaQueryList.prototype.removeListener = /**\n     * Don't need to remove listeners in the server environment\n     * @param {?} _\n     * @return {?}\n     */\n        function (_) {\n        };\n    return ServerMediaQueryList;\n}());\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\nvar ServerMatchMedia = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ServerMatchMedia, _super);\n    function ServerMatchMedia(_zone, _platformId, _document) {\n        var _this = _super.call(this, _zone, _platformId, _document) || this;\n        _this._zone = _zone;\n        _this._platformId = _platformId;\n        _this._document = _document;\n        _this._registry = new Map();\n        _this._source = new BehaviorSubject(new MediaChange(true));\n        _this._observable$ = _this._source.asObservable();\n        return _this;\n    }\n    /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n    /**\n     * Activate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n    ServerMatchMedia.prototype.activateBreakpoint = /**\n     * Activate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n        function (bp) {\n            var /** @type {?} */ lookupBreakpoint = this._registry.get(bp.mediaQuery);\n            if (lookupBreakpoint) {\n                lookupBreakpoint.activate();\n            }\n        };\n    /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n    /**\n     * Deactivate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n    ServerMatchMedia.prototype.deactivateBreakpoint = /**\n     * Deactivate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n        function (bp) {\n            var /** @type {?} */ lookupBreakpoint = this._registry.get(bp.mediaQuery);\n            if (lookupBreakpoint) {\n                lookupBreakpoint.deactivate();\n            }\n        };\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    ServerMatchMedia.prototype._buildMQL = /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            return new ServerMediaQueryList(query);\n        };\n    return ServerMatchMedia;\n}(MatchMedia));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\nvar MediaMonitor = /** @class */ /*@__PURE__*/ (function () {\n    function MediaMonitor(_breakpoints, _matchMedia) {\n        this._breakpoints = _breakpoints;\n        this._matchMedia = _matchMedia;\n        this._registerBreakpoints();\n    }\n    Object.defineProperty(MediaMonitor.prototype, \"breakpoints\", {\n        /**\n         * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n         */\n        get: /**\n         * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n         * @return {?}\n         */ function () {\n            return this._breakpoints.items.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MediaMonitor.prototype, \"activeOverlaps\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _this = this;\n            var /** @type {?} */ items = this._breakpoints.overlappings.reverse();\n            return items.filter(function (bp) {\n                return _this._matchMedia.isActive(bp.mediaQuery);\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MediaMonitor.prototype, \"active\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _this = this;\n            var /** @type {?} */ found = null, /** @type {?} */ items = this.breakpoints.reverse();\n            items.forEach(function (bp) {\n                if (bp.alias !== '') {\n                    if (!found && _this._matchMedia.isActive(bp.mediaQuery)) {\n                        found = bp;\n                    }\n                }\n            });\n            var /** @type {?} */ first = this.breakpoints[0];\n            return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * For the specified mediaQuery alias, is the mediaQuery range active?\n     */\n    /**\n     * For the specified mediaQuery alias, is the mediaQuery range active?\n     * @param {?} alias\n     * @return {?}\n     */\n    MediaMonitor.prototype.isActive = /**\n     * For the specified mediaQuery alias, is the mediaQuery range active?\n     * @param {?} alias\n     * @return {?}\n     */\n        function (alias) {\n            var /** @type {?} */ bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n            return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n        };\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * If specific breakpoint is observed, only return *activated* events\n     * otherwise return all events for BOTH activated + deactivated changes.\n     */\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * If specific breakpoint is observed, only return *activated* events\n     * otherwise return all events for BOTH activated + deactivated changes.\n     * @param {?=} alias\n     * @return {?}\n     */\n    MediaMonitor.prototype.observe = /**\n     * External observers can watch for all (or a specific) mql changes.\n     * If specific breakpoint is observed, only return *activated* events\n     * otherwise return all events for BOTH activated + deactivated changes.\n     * @param {?=} alias\n     * @return {?}\n     */\n        function (alias) {\n            var /** @type {?} */ bp = this._breakpoints.findByAlias(alias || '') ||\n                this._breakpoints.findByQuery(alias || '');\n            var /** @type {?} */ hasAlias = function (change) { return (bp ? change.mqAlias !== '' : true); };\n            // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n            var /** @type {?} */ media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n            return media$.pipe(map(function (change) { return mergeAlias(change, bp); }), filter(hasAlias));\n        };\n    /**\n     * Immediate calls to matchMedia() to establish listeners\n     * and prepare for immediate subscription notifications\n     * @return {?}\n     */\n    MediaMonitor.prototype._registerBreakpoints = /**\n     * Immediate calls to matchMedia() to establish listeners\n     * and prepare for immediate subscription notifications\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ queries = this._breakpoints.sortedItems.map(function (bp) { return bp.mediaQuery; });\n            this._matchMedia.registerQuery(queries);\n        };\n    /** @nocollapse */ MediaMonitor.ngInjectableDef = defineInjectable({ factory: function MediaMonitor_Factory() { return new MediaMonitor(inject(BreakPointRegistry), inject(MatchMedia)); }, token: MediaMonitor, providedIn: \"root\" });\n    return MediaMonitor;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ensure a single global service provider\n * @deprecated\n * \\@deletion-target v6.0.0-beta.16\n * @param {?} parentMonitor\n * @param {?} breakpoints\n * @param {?} matchMedia\n * @return {?}\n */\nfunction MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor, breakpoints, matchMedia) {\n    return parentMonitor || new MediaMonitor(breakpoints, matchMedia);\n}\n/**\n * Export provider that uses a global service factory (above)\n * @deprecated\n * \\@deletion-target v6.0.0-beta.16\n */\nvar /** @type {?} */ MEDIA_MONITOR_PROVIDER = {\n    provide: MediaMonitor,\n    deps: [\n        [/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), MediaMonitor],\n        BreakPointRegistry,\n        MatchMedia,\n    ],\n    useFactory: MEDIA_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ensure a single global ObservableMedia service provider\n * @deprecated\n * \\@deletion-target v6.0.0-beta.16\n * @param {?} parentService\n * @param {?} matchMedia\n * @param {?} breakpoints\n * @return {?}\n */\nfunction OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService, matchMedia, breakpoints) {\n    return parentService || new MediaService(breakpoints, matchMedia);\n}\n/**\n *  Provider to return global service for observable service for all MediaQuery activations\n *  \\@deprecated\n *  \\@deletion-target v6.0.0-beta.16\n */\nvar /** @type {?} */ OBSERVABLE_MEDIA_PROVIDER = {\n    // tslint:disable-line:variable-name\n    provide: ObservableMedia,\n    deps: [\n        [/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), ObservableMedia],\n        MatchMedia,\n        BreakPointRegistry\n    ],\n    useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n    for (var /** @type {?} */ key in target) {\n        var /** @type {?} */ value = target[key] || '';\n        switch (key) {\n            case 'display':\n                if (value === 'flex') {\n                    target['display'] = [\n                        '-webkit-flex',\n                        'flex'\n                    ];\n                }\n                else if (value === 'inline-flex') {\n                    target['display'] = [\n                        '-webkit-inline-flex',\n                        'inline-flex'\n                    ];\n                }\n                else {\n                    target['display'] = value;\n                }\n                break;\n            case 'align-items':\n            case 'align-self':\n            case 'align-content':\n            case 'flex':\n            case 'flex-basis':\n            case 'flex-flow':\n            case 'flex-grow':\n            case 'flex-shrink':\n            case 'flex-wrap':\n            case 'justify-content':\n                target['-webkit-' + key] = value;\n                break;\n            case 'flex-direction':\n                value = value || 'row';\n                target['-webkit-flex-direction'] = value;\n                target['flex-direction'] = value;\n                break;\n            case 'order':\n                target['order'] = target['-webkit-' + key] = isNaN(value) ? '0' : value;\n                break;\n        }\n    }\n    return target;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar StyleUtils = /** @class */ /*@__PURE__*/ (function () {\n    function StyleUtils(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n    StyleUtils.prototype.applyStyleToElement = /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n        function (element, style, value) {\n            var /** @type {?} */ styles = {};\n            if (typeof style === 'string') {\n                styles[style] = value;\n                style = styles;\n            }\n            styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n            this._applyMultiValueStyleToElement(styles, element);\n        };\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n    StyleUtils.prototype.applyStyleToElements = /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n        function (style, elements) {\n            var _this = this;\n            if (elements === void 0) {\n                elements = [];\n            }\n            var /** @type {?} */ styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n            elements.forEach(function (el) {\n                _this._applyMultiValueStyleToElement(styles, el);\n            });\n        };\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n    StyleUtils.prototype.getFlowDirection = /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n        function (target) {\n            var /** @type {?} */ query = 'flex-direction';\n            var /** @type {?} */ value = this.lookupStyle(target, query);\n            if (value === FALLBACK_STYLE) {\n                value = '';\n            }\n            var /** @type {?} */ hasInlineValue = this.lookupInlineStyle(target, query) ||\n                (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n            return [value || 'row', hasInlineValue];\n        };\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    StyleUtils.prototype.lookupAttributeValue = /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n        function (element, attribute) {\n            return element.getAttribute(attribute) || '';\n        };\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    StyleUtils.prototype.lookupInlineStyle = /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n        function (element, styleName) {\n            return isPlatformBrowser(this._platformId) ?\n                element.style[styleName] : this._getServerStyle(element, styleName);\n        };\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n    StyleUtils.prototype.lookupStyle = /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n        function (element, styleName, inlineOnly) {\n            if (inlineOnly === void 0) {\n                inlineOnly = false;\n            }\n            var /** @type {?} */ value = '';\n            if (element) {\n                var /** @type {?} */ immediateValue = value = this.lookupInlineStyle(element, styleName);\n                if (!immediateValue) {\n                    if (isPlatformBrowser(this._platformId)) {\n                        if (!inlineOnly) {\n                            value = getComputedStyle(element).getPropertyValue(styleName);\n                        }\n                    }\n                    else {\n                        if (this._serverModuleLoaded) {\n                            value = this._serverStylesheet.getStyleForElement(element, styleName);\n                        }\n                    }\n                }\n            }\n            // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n            //       in which case getComputedStyle() should determine a valid value.\n            return value ? value.trim() : FALLBACK_STYLE;\n        };\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n    StyleUtils.prototype._applyMultiValueStyleToElement = /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n        function (styles, element) {\n            var _this = this;\n            Object.keys(styles).sort().forEach(function (key) {\n                var /** @type {?} */ values = Array.isArray(styles[key]) ? styles[key] : [styles[key]];\n                values.sort();\n                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                    var value = values_1[_i];\n                    if (isPlatformBrowser(_this._platformId) || !_this._serverModuleLoaded) {\n                        isPlatformBrowser(_this._platformId) ?\n                            element.style.setProperty(key, value) : _this._setServerStyle(element, key, value);\n                    }\n                    else {\n                        _this._serverStylesheet.addStyleToElement(element, key, value);\n                    }\n                }\n            });\n        };\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    StyleUtils.prototype._setServerStyle = /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n        function (element, styleName, styleValue) {\n            styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n            var /** @type {?} */ styleMap = this._readStyleAttribute(element);\n            styleMap[styleName] = styleValue || '';\n            this._writeStyleAttribute(element, styleMap);\n        };\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    StyleUtils.prototype._getServerStyle = /**\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n        function (element, styleName) {\n            var /** @type {?} */ styleMap = this._readStyleAttribute(element);\n            return styleMap[styleName] || '';\n        };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    StyleUtils.prototype._readStyleAttribute = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            var /** @type {?} */ styleMap = {};\n            var /** @type {?} */ styleAttribute = element.getAttribute('style');\n            if (styleAttribute) {\n                var /** @type {?} */ styleList = styleAttribute.split(/;+/g);\n                for (var /** @type {?} */ i = 0; i < styleList.length; i++) {\n                    var /** @type {?} */ style = styleList[i].trim();\n                    if (style.length > 0) {\n                        var /** @type {?} */ colonIndex = style.indexOf(':');\n                        if (colonIndex === -1) {\n                            throw new Error(\"Invalid CSS style: \" + style);\n                        }\n                        var /** @type {?} */ name_1 = style.substr(0, colonIndex).trim();\n                        styleMap[name_1] = style.substr(colonIndex + 1).trim();\n                    }\n                }\n            }\n            return styleMap;\n        };\n    /**\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n    StyleUtils.prototype._writeStyleAttribute = /**\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n        function (element, styleMap) {\n            var /** @type {?} */ styleAttrValue = '';\n            for (var /** @type {?} */ key in styleMap) {\n                var /** @type {?} */ newValue = styleMap[key];\n                if (newValue) {\n                    styleAttrValue += key + ':' + styleMap[key] + ';';\n                }\n            }\n            element.setAttribute('style', styleAttrValue);\n        };\n    /** @nocollapse */ StyleUtils.ngInjectableDef = defineInjectable({ factory: function StyleUtils_Factory() { return new StyleUtils(inject(StylesheetMap, 8), inject(SERVER_TOKEN, 8), inject(PLATFORM_ID), inject(LAYOUT_CONFIG)); }, token: StyleUtils, providedIn: \"root\" });\n    return StyleUtils;\n}());\nvar /** @type {?} */ FALLBACK_STYLE = 'block';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow, shrink) {\n    if (grow === void 0) {\n        grow = '1';\n    }\n    if (shrink === void 0) {\n        shrink = '1';\n    }\n    var /** @type {?} */ parts = [grow, shrink, basis];\n    var /** @type {?} */ j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        var /** @type {?} */ matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        var /** @type {?} */ matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { removeStyles, BROWSER_PROVIDER, CLASS_NAME, CoreModule, MediaChange, StylesheetMap, STYLESHEET_MAP_PROVIDER_FACTORY, STYLESHEET_MAP_PROVIDER, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, BaseDirective, BaseDirectiveAdapter, BaseFxDirective, RESPONSIVE_ALIASES, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MatchMedia, MockMatchMedia, MockMediaQueryList, MockMatchMediaProvider, ServerMediaQueryList, ServerMatchMedia, MediaMonitor, MEDIA_MONITOR_PROVIDER_FACTORY, MEDIA_MONITOR_PROVIDER, ObservableMedia, MediaService, ObservableMediaProvider, OBSERVABLE_MEDIA_PROVIDER_FACTORY, OBSERVABLE_MEDIA_PROVIDER, KeyOptions, ResponsiveActivation, StyleUtils, validateBasis };\n//# sourceMappingURL=core.es5.js.map\n",null]}